from modules.ts_bytes import byteClass


def test_slice_getitem():
    data = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    instance = byteClass(bytearray(data))
    assert instance._data == bytearray(data)

    u8_list = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    for i in range(len(u8_list)):
         assert instance.u8[i] == u8_list[i]

    u16_list = [0x0100, 0x0302, 0x0504, 0x0706, 0x0908, 0x0b0a, 0x0d0c, 0x0f0e]
    for i in range(len(u16_list)):
         assert instance.u16[i] == u16_list[i]

    u32_list = [0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c]
    for i in range(len(u32_list)):
         assert instance.u32[i] == u32_list[i]

    u64_list = [0x0706050403020100, 0x0f0e0d0c0b0a0908]
    for i in range(len(u64_list)):
         assert instance.u64[i] == u64_list[i]

    u128_list = [0x0f0e0d0c0b0a09080706050403020100]
    for i in range(len(u128_list)):
         assert instance.u128[i] == u128_list[i]


def test_slice_setitem_u8():
    data = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    instance = byteClass(bytearray(data))

    instance.u8[0] = 0xFF

    u8_list = [0xFF, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    for i in range(len(u8_list)):
         assert instance.u8[i] == u8_list[i]

    u16_list = [0x01FF, 0x0302, 0x0504, 0x0706, 0x0908, 0x0b0a, 0x0d0c, 0x0f0e]
    for i in range(len(u16_list)):
         assert instance.u16[i] == u16_list[i]

    u32_list = [0x030201FF, 0x07060504, 0x0b0a0908, 0x0f0e0d0c]
    for i in range(len(u32_list)):
         assert instance.u32[i] == u32_list[i]

    u64_list = [0x07060504030201FF, 0x0f0e0d0c0b0a0908]
    for i in range(len(u64_list)):
         assert instance.u64[i] == u64_list[i]

    u128_list = [0x0f0e0d0c0b0a090807060504030201FF]
    for i in range(len(u128_list)):
         assert instance.u128[i] == u128_list[i]


def test_slice_setitem_u16():
    data = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    instance = byteClass(bytearray(data))

    instance.u16[0] = 0xFF

    u8_list = [0xFF, 0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    for i in range(len(u8_list)):
         assert instance.u8[i] == u8_list[i]

    u16_list = [0x00FF, 0x0302, 0x0504, 0x0706, 0x0908, 0x0b0a, 0x0d0c, 0x0f0e]
    for i in range(len(u16_list)):
         assert instance.u16[i] == u16_list[i]

    u32_list = [0x030200FF, 0x07060504, 0x0b0a0908, 0x0f0e0d0c]
    for i in range(len(u32_list)):
         assert instance.u32[i] == u32_list[i]

    u64_list = [0x07060504030200FF, 0x0f0e0d0c0b0a0908]
    for i in range(len(u64_list)):
         assert instance.u64[i] == u64_list[i]

    u128_list = [0x0f0e0d0c0b0a090807060504030200FF]
    for i in range(len(u128_list)):
         assert instance.u128[i] == u128_list[i]


def test_slice_setitem_u32():
    data = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    instance = byteClass(bytearray(data))

    instance.u32[0] = 0xFF

    u8_list = [0xFF, 0x00, 0x00, 0x00, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    for i in range(len(u8_list)):
         assert instance.u8[i] == u8_list[i]

    u16_list = [0x00FF, 0x0000, 0x0504, 0x0706, 0x0908, 0x0b0a, 0x0d0c, 0x0f0e]
    for i in range(len(u16_list)):
         assert instance.u16[i] == u16_list[i]

    u32_list = [0x000000FF, 0x07060504, 0x0b0a0908, 0x0f0e0d0c]
    for i in range(len(u32_list)):
         assert instance.u32[i] == u32_list[i]

    u64_list = [0x07060504000000FF, 0x0f0e0d0c0b0a0908]
    for i in range(len(u64_list)):
         assert instance.u64[i] == u64_list[i]

    u128_list = [0x0f0e0d0c0b0a090807060504000000FF]
    for i in range(len(u128_list)):
         assert instance.u128[i] == u128_list[i]


def test_fromInt128():
    n = byteClass.fromInt128(0x0f0e0d0c0b0a09080706050403020100)
    assert n._count == 16

    data = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    for i in range(len(data)):
        assert n.as_u8[ i ] == data[ i ]

def test_convert():
    xmmword_0284F970 = byteClass(
        bytearray([0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00]))

    xmmword_0284FBC0 = byteClass(
        bytearray([0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    xmmword_0284FBD0 = byteClass(
        bytearray([0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))
    xmmword_0284FBE0 = byteClass(
        bytearray([0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00]))


def test_bytearray_copy():
    d1 = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    a1 = bytearray([])

    # whole copy
    a1[:] = bytearray(d1)

    assert len(a1) == len(d1)
    a1[1:3] = bytearray([0xFF,0xFF])

    assert a1[0] == 0x00
    assert a1[1] == 0xff
    assert a1[2] == 0xff
    assert a1[3] == 0x03
