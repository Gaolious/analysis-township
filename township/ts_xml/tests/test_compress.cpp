#include <gtest/gtest.h>
#include <inc/compress.h>
using namespace std;

/////////////////////////////////////////////////////////////////////////////
// Google Test Naming Category
//
// Prefix      TestCase Name     Test Name
// TestTSXML > TestMurMur2Hash > ShouldReturnExpectedValue_WhenGivenData
//
// TEST_P(TestCaseName, TestName)
/////////////////////////////////////////////////////////////////////////////


namespace ns_xml_compress {
    struct param {
        const char *in_message;
        // unsigned int size ;
        const char *out_message;
    };
    struct TestCompress : public ::testing::TestWithParam<param> {
    };

    TEST_P(TestCompress, ShouldReturnExpectedValue_WhenGivenData) {
        int i;
        int len;
        TSBINARY ret_compress, ret_uncompress;
        param p = GetParam();

        ////////////////////////////////////////////////////////////
        // in_message -> compress -> out_message
        ////////////////////////////////////////////////////////////
        len = strlen(p.in_message);
        ts_compress((_BYTE *) p.in_message, len, &ret_compress);

        EXPECT_EQ((_BYTE) ret_compress[0], (_BYTE) 0x1f);
        EXPECT_EQ((_BYTE) ret_compress[1], (_BYTE) 0x8b);

        for (i = 0; i < ret_compress.size(); i++)
            EXPECT_EQ((_BYTE) ret_compress[i], (_BYTE) p.out_message[i]);

        ////////////////////////////////////////////////////////////
        // out_message -> decompress -> in_message
        ////////////////////////////////////////////////////////////
        ts_decompress((_BYTE *) p.out_message, ret_compress.size(), &ret_uncompress);

        for (i = 0; i < ret_uncompress.size(); i++)
            EXPECT_EQ((_BYTE) ret_uncompress[i], (_BYTE) p.in_message[i]);

        EXPECT_EQ((_DWORD) ret_uncompress.size(), (_DWORD) len);
    }

    INSTANTIATE_TEST_CASE_P

    (
        TestTsHttp,
        TestCompress,
        ::testing::Values(
            param{
                "\x7b\x22\x63\x69\x74\x79\x49\x64\x22\x3a\x22\x51\x53\x32\x33\x51\x6d\x4a\x67\x52\x6d\x22\x2c\x22\x74\x7a\x22\x3a\x33\x32\x34\x30\x30\x20\x7d",
                "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\xab\x56\x4a\xce\x2c\xa9\xf4\x4c\x51\xb2\x52\x0a\x0c\x36\x32\x0e\xcc\xf5\x4a\x0f\xca\x55\xd2\x51\x2a\xa9\x52\xb2\x32\x36\x32\x31\x30\x50\xa8\x05\x00\x1a\xe0\x3a\xba\x23\x00\x00\x00"
            },
            param{
                "\x7b\x22\x63\x69\x74\x79\x49\x64\x22\x3a\x22\x51\x53\x32\x33\x51\x6d\x4a\x67\x52\x6d\x22\x2c\x22\x63\x69\x74\x79\x49\x64\x73\x22\x3a\x5b\x22\x32\x34\x69\x58\x56\x6d\x52\x71\x41\x38\x22\x2c\x22\x42\x47\x34\x65\x46\x4b\x59\x46\x76\x73\x22\x2c\x22\x4f\x59\x4b\x36\x33\x47\x56\x46\x76\x56\x22\x2c\x22\x50\x32\x68\x46\x54\x47\x69\x6d\x6a\x4d\x22\x2c\x22\x57\x58\x7a\x6b\x45\x69\x34\x6d\x6e\x4d\x22\x2c\x22\x5a\x79\x71\x68\x62\x4e\x48\x4d\x67\x56\x22\x2c\x22\x61\x4f\x73\x61\x44\x44\x70\x6b\x54\x54\x22\x2c\x22\x64\x67\x45\x73\x51\x67\x67\x51\x6c\x4b\x22\x2c\x22\x74\x4b\x61\x45\x47\x56\x56\x34\x57\x69\x22\x2c\x22\x76\x67\x6f\x78\x77\x4e\x44\x71\x52\x71\x22\x2c\x22\x78\x37\x65\x37\x42\x35\x53\x67\x39\x56\x22\x2c\x22\x55\x34\x79\x4e\x36\x56\x76\x63\x6d\x34\x22\x2c\x22\x49\x74\x42\x59\x42\x4c\x38\x47\x45\x77\x22\x2c\x22\x51\x30\x50\x66\x71\x4a\x42\x68\x6e\x64\x22\x2c\x22\x48\x76\x6f\x6a\x53\x37\x33\x47\x63\x39\x22\x2c\x22\x72\x54\x68\x34\x63\x44\x31\x78\x39\x31\x22\x2c\x22\x4c\x4c\x46\x65\x47\x6f\x7a\x32\x5a\x74\x22\x2c\x22\x70\x72\x69\x68\x66\x34\x43\x6c\x6c\x6a\x22\x2c\x22\x55\x4d\x4d\x6f\x61\x77\x69\x31\x52\x5a\x22\x2c\x22\x51\x6d\x6c\x52\x59\x41\x59\x35\x48\x6c\x22\x2c\x22\x4c\x4e\x44\x51\x73\x35\x58\x44\x43\x66\x22\x5d\x20\x7d",
                "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\x2d\xcc\x4b\x6f\x82\x40\x14\x86\xe1\xbf\xd2\xcc\xba\x8b\x8a\x83\x88\x3b\x11\x18\x95\x8b\x72\x29\x82\x4d\x17\x14\x64\x18\x64\x44\x84\x70\xd1\xf4\xbf\xf7\x90\x74\xf9\x7c\x39\xe7\x7d\xa1\x84\xb5\xe3\x2e\x45\x2b\xe4\x78\xc2\xdc\xe1\x7b\xea\x72\xf4\xfe\xbf\x36\x68\xf5\x85\x04\xcc\xc2\x80\xbb\xf5\x7a\x09\xbb\x42\xf0\x45\x37\x22\xbd\x6b\x00\x87\xc8\x58\xcc\x49\xa0\x77\x01\xe0\x28\xe4\xba\x4f\x18\x2f\x2c\xc0\x29\x7c\x5e\x35\x86\xf9\x6d\xc2\x79\xac\xf3\x1f\x7b\x6b\xd1\xe9\x2c\x3e\x34\xb1\xaa\xde\xaf\xbe\x0f\x48\xa9\xd6\x38\x94\x3a\xa5\x01\x68\x8d\x58\x23\x41\x80\x4f\x0c\xd0\xd1\x6a\xe8\x6d\xb5\x76\x6b\xc0\x20\x5d\x24\x45\xf4\xa8\x3c\x05\x3e\xf1\x68\x2f\x82\x2e\xe1\x18\xb0\x6b\x95\x48\x31\x97\x44\xeb\x01\xce\xc7\x31\xab\xf7\x4a\x7e\x4b\x01\xdb\xae\x2a\x3c\x69\x4e\x12\x19\xf0\xf0\x73\x9c\xa8\xb3\x41\x9e\x01\x4c\x53\xbf\x90\xea\x29\x9c\x5b\xc0\xfd\xc1\xf2\x0c\x6f\xca\xb2\x98\xd2\x96\x55\xc5\x3d\x9b\xb9\xe7\xa9\xc6\x4b\x37\x5a\x47\xe2\xb6\x9c\x7e\x6c\xd5\x69\xc4\x50\xdd\x64\xe8\xfb\xed\xf7\x0f\x70\x0b\xec\x4f\x35\x01\x00\x00"
            },
            param{
                "\x7b\x22\x63\x69\x74\x79\x49\x64\x22\x3a\x22\x51\x53\x32\x33\x51\x6d\x4a\x67\x52\x6d\x22\x2c\x22\x63\x69\x74\x79\x56\x65\x72\x22\x3a\x31\x36\x30\x36\x39\x32\x38\x30\x30\x34\x2c\x22\x66\x65\x74\x63\x68\x43\x69\x74\x79\x49\x64\x22\x3a\x22\x50\x32\x68\x46\x54\x47\x69\x6d\x6a\x4d\x22\x20\x7d",
                "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\xab\x56\x4a\xce\x2c\xa9\xf4\x4c\x51\xb2\x52\x0a\x0c\x36\x32\x0e\xcc\xf5\x4a\x0f\xca\x55\xd2\x01\x8b\x86\xa5\x16\x29\x59\x19\x9a\x19\x98\x59\x1a\x59\x18\x18\x98\xe8\x28\xa5\xa5\x96\x24\x67\x38\xc3\xd4\x07\x18\x65\xb8\x85\xb8\x67\xe6\x66\xf9\x2a\x29\xd4\x02\x00\xcc\x2a\x65\x49\x48\x00\x00\x00"
            },
            param{
                "\x7b\x22\x63\x69\x74\x79\x49\x64\x22\x3a\x22\x51\x53\x32\x33\x51\x6d\x4a\x67\x52\x6d\x22\x2c\x22\x63\x6f\x6e\x73\x69\x73\x74\x65\x6e\x74\x52\x65\x61\x64\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x6d\x6f\x72\x65\x22\x3a\x74\x72\x75\x65\x2c\x22\x75\x73\x65\x72\x49\x64\x22\x3a\x22\x50\x32\x68\x46\x54\x47\x69\x6d\x6a\x4d\x22\x20\x7d",
                "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\xab\x56\x4a\xce\x2c\xa9\xf4\x4c\x51\xb2\x52\x0a\x0c\x36\x32\x0e\xcc\xf5\x4a\x0f\xca\x55\xd2\x51\x4a\xce\xcf\x2b\xce\x2c\x2e\x49\xcd\x2b\x09\x4a\x4d\x04\xca\xa6\x25\xe6\x14\xa7\xea\x28\xe5\xe6\x17\xa5\x2a\x59\x95\x14\x95\x02\xd9\xa5\xc5\xa9\x45\x60\x8d\x01\x46\x19\x6e\x21\xee\x99\xb9\x59\xbe\x4a\x0a\xb5\x00\x75\x61\x1a\x2b\x51\x00\x00\x00",
            },
            param{
                "\x7b\x22\x63\x69\x74\x79\x49\x64\x22\x3a\x22\x51\x53\x32\x33\x51\x6d\x4a\x67\x52\x6d\x22\x2c\x22\x63\x6c\x61\x6e\x49\x64\x22\x3a\x22\x4d\x67\x30\x4d\x53\x57\x5a\x43\x70\x50\x22\x2c\x22\x63\x6f\x6e\x73\x69\x73\x74\x65\x6e\x74\x52\x65\x61\x64\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x6f\x6e\x6c\x79\x43\x6c\x61\x6e\x41\x74\x74\x72\x22\x3a\x74\x72\x75\x65\x20\x7d",
                "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\xab\x56\x4a\xce\x2c\xa9\xf4\x4c\x51\xb2\x52\x0a\x0c\x36\x32\x0e\xcc\xf5\x4a\x0f\xca\x55\xd2\x51\x4a\xce\x49\xcc\x03\x8b\xfa\xa6\x1b\xf8\x06\x87\x47\x39\x17\x04\x80\x44\xf3\xf3\x8a\x33\x8b\x4b\x52\xf3\x4a\x82\x52\x13\x81\xb2\x69\x89\x39\xc5\xa9\x3a\x4a\xf9\x79\x39\x95\xce\x40\x0d\x8e\x25\x25\x45\x4a\x56\x25\x45\xa5\xa9\x0a\xb5\x00\x16\x66\x5b\x69\x59\x00\x00\x00",
            },
            param{
                "\x7b\x22\x63\x69\x74\x79\x49\x64\x22\x3a\x22\x51\x53\x32\x33\x51\x6d\x4a\x67\x52\x6d\x22\x2c\x22\x63\x6c\x61\x6e\x49\x64\x22\x3a\x22\x4d\x67\x30\x4d\x53\x57\x5a\x43\x70\x50\x22\x20\x7d",
                "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03\xab\x56\x4a\xce\x2c\xa9\xf4\x4c\x51\xb2\x52\x0a\x0c\x36\x32\x0e\xcc\xf5\x4a\x0f\xca\x55\xd2\x51\x4a\xce\x49\xcc\x03\x8b\xfa\xa6\x1b\xf8\x06\x87\x47\x39\x17\x04\x28\x29\xd4\x02\x00\x0b\x59\x97\x97\x2e\x00\x00\x00",
            }
        )
    );
}


namespace ns_xml_decompress
{
    struct param {
        int in_size ;
        const char *in_message ;
        const char *out_message;
    };

    struct TestDeompress : public ::testing::TestWithParam<param>{};

    TEST_P(TestDeompress, ShouldReturnExpectedValue_WhenGivenData){
        int i ;
        int len ;
        TSBINARY ret_decompress, ret_uncompress;
        param p = GetParam();

        ////////////////////////////////////////////////////////////
        // in_message -> compress -> out_message
        ////////////////////////////////////////////////////////////
        len = p.in_size;
        ts_decompress((_BYTE *)p.in_message, len, &ret_decompress);

        for ( i = 0 ; i < ret_decompress.size() ; i ++ )
            EXPECT_EQ((_BYTE)ret_decompress[i], (_BYTE)p.out_message[i]);
        printf("%s\n", ret_decompress.data());
    }

    INSTANTIATE_TEST_CASE_P(
        TestTsHttp,
        TestDeompress,
        ::testing::Values(
            param{
                330,
                "\x1f\x8b\x8\x0\x0\x0\x0\x0\x0\x3\xec\xbd\x6b\x8f\x24\x49\x72\x20\xf6\x99\xf7\x2b\xea\xea\x3\x1f\xa7\x9a\xee\x78\x47\x66\xb3\xe6\x80\x7a\x74\x57\xd7\x4c\x3f\x6a\xaa\xaa\xbb\xb9\xab\x13\x12\x9e\x91\x9e\x99\x31\x15\x19\x91\x13\x11\x59\x8f\x59\x2d\xa0\x7\x75\x24\x40\x40\x14\x4f\xa0\x40\x10\x20\xe\x3a\x48\x94\x4e\x10\x74\x24\x28\x9\xa2\x4\x51\x7f\x61\xef\x2f\x8\xda\x25\x9\xf2\x47\xc8\x1f\xf1\xf0\x88\xc\x8f\x30\xcf\xca\xac\xca\x9a\xe9\xe5\x72\xbb\x32\xd3\xcc\xdd\xdc\xdc\xcc\xdc\xcc\xdc\xdc\x7d\x3f\x8e\xa2\xf4\x9f\xff\x93\x5f\xdb\x3f\x9\xa2\x21\xa\xc8\x5f\xbf\xb6\xff\x11\xc5\x3b\x21\x9a\xe1\x2f\x77\xbf\x59\xe0\x24\x3d\x88\xe3\xe8\xe6\x13\x4a\x2e\xa6\xd1\xd\x1e\xed\xee\x5c\x7f\xb9\xab\xef\xee\xa4\x5f\xee\xe\x77\x9f\x37\xc1\x1f\x45\xb3\x79\x80\x53\x7c\x14\x2d\xc2\x14\xc7\xc\xc1\x65\x8\xfe\x12\xc2\x59\xec\x7b\x78\x70\x79\x84\x92\xa9\xc3\x0\xff\xdf\xff\xec\xdf\xea\x7a\x7f\x4f\xd3\xb4\x56\x58\x23\x7\xee\x75\xc3\xea\x39\x6c\xbf\x13\xd6\xca\x41\xd\xbb\x13\xb4\x20\x41\x77\x3b\x61\xb\x12\xc\xad\x13\xb6\xe4\x43\x37\xd\x6e\x31\xb4\xbd\x7e\x7\x68\x2f\x7\xb5\xba\x40\xed\x2\xb2\x93\x5f\x76\x6e\xe6\x6e\xcd\xfd\x1b\x57\xb\x8c\x90\xf2\xdf\x86\x22\x8c\x9d\x72\xe3\x6b\xd7\xb\xc9\x61\x66\x78\xec\x18\x7c\xc1\xd4\x50\x9b\x9b\x70\xa2\x56\x84\x12\x76\x2\xe8\x79\x29\xf2\x12\xf3\x3e\x49\x9d\x2c\x21",
                "\x3c\x72\x6f\x6f\x74\x3e\xa\x9\x3c\x47\x6c\x6f\x62\x61\x6c\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x51\x75\x65\x73\x74\x41\x72\x72\x6f\x77\x57\x61\x73\x53\x68\x6f\x77\x65\x64\x22\x20\x76\x3d\x22\x31\x22\x20\x74\x3d\x22\x62\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x51\x75\x65\x73\x74\x43\x6f\x6d\x70\x6c\x65\x74\x65\x43\x6f\x75\x6e\x74\x65\x72\x22\x20\x76\x3d\x22\x37\x22\x20\x74\x3d\x22\x69\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x36\x22\x20\x76\x3d\x22\xe2\x82\xa9\x31\x31\x39\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x36\x32\x22\x20\x76\x3d\x22\xe2\x82\xa9\x38\x39\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x36\x31\x22\x20\x76\x3d\x22\xe2\x82\xa9\x39\x39\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x34\x22\x20\x76\x3d\x22\xe2\x82\xa9\x32\x35\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x34\x32\x22\x20\x76\x3d\x22\xe2\x82\xa9\x31\x37\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x34\x31\x22\x20\x76\x3d\x22\xe2\x82\xa9\x32\x30\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x34\x36\x22\x20\x76\x3d\x22\xe2\x82\xa9\x31\x35\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x34\x37\x22\x20\x76\x3d\x22\xe2\x82\xa9\x39\x2c\x39\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x34\x38\x22\x20\x76\x3d\x22\xe2\x82\xa9\x34\x2c\x39\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x35\x22\x20\x76\x3d\x22\xe2\x82\xa9\x34\x39\x2c\x30\x30\x30\x22\x2f\x3e\xa\x9\x9\x3c\x56\x61\x72\x20\x6e\x61\x6d\x65\x3d\x22\x50\x72\x69\x63\x65\x5f\x54\x43\x61\x73\x68\x35\x0"
            }
        )
    );

}



