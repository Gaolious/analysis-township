#include <gtest/gtest.h>
#include <tuple>

#include "inc/hash.h"
#include "inc/types.h"

using namespace std;

/////////////////////////////////////////////////////////////////////////////
// Google Test Naming Category
//
// Prefix      TestCase Name     Test Name
// TestTSXML > TestMurMur2Hash > ShouldReturnExpectedValue_WhenGivenData
//
// TEST_P(TestCaseName, TestName)
/////////////////////////////////////////////////////////////////////////////

namespace MurMur2Hash 
{
    struct param {
        _BYTE p1[4]; 
        _DWORD seed;
        _DWORD ret;
    };
    struct TestMurmur2Hash : public ::testing::TestWithParam<param>{};

    TEST_P(TestMurmur2Hash, ShouldReturnExpectedValue_WhenGivenData){
        auto p = GetParam();
        _DWORD ret = MurmurHash2 ( (const void *)&p.p1, 4, p.seed );
        EXPECT_EQ(ret, p.ret);
    }
    
    INSTANTIATE_TEST_CASE_P(
        TestTsXML,
        TestMurmur2Hash,
        ::testing::Values(
            param{{0xA4, 0xF5, 0x1C, 0x4F}, 0x000A21E7, 0x0D309935 },
            param{{0xA4, 0xF5, 0x1C, 0x4F}, 0x000A21E7, 0x0D309935 },
            param{{0x35, 0x99, 0x30, 0x0D}, 0x000A21E7, 0x0303AF65 },
            param{{0x65, 0xAF, 0x03, 0x03}, 0x000A21E7, 0xB21D62F4 },
            param{{0xF4, 0x62, 0x1D, 0xB2}, 0x000A21E7, 0x644F8840 },
            param{{0x40, 0x88, 0x4F, 0x64}, 0x000A21E7, 0xBDB9FC4F },
            param{{0x4F, 0xFC, 0xB9, 0xBD}, 0x000A21E7, 0xE8CC15A6 },
            param{{0xA6, 0x15, 0xCC, 0xE8}, 0x000A21E7, 0xB6F532DC },
            param{{0xDC, 0x32, 0xF5, 0xB6}, 0x000A21E7, 0xB03D1B5C },
            param{{0x5C, 0x1B, 0x3D, 0xB0}, 0x000A21E7, 0x16540DE0 },
            param{{0xE0, 0x0D, 0x54, 0x16}, 0x000A21E7, 0xB5520DC2 },
            param{{0xC2, 0x0D, 0x52, 0xB5}, 0x000A21E7, 0x7F933CD9 },
            param{{0xD9, 0x3C, 0x93, 0x7F}, 0x000A21E7, 0xE972D2A5 },
            param{{0xA5, 0xD2, 0x72, 0xE9}, 0x000A21E7, 0xA2A6465F },
            param{{0x5F, 0x46, 0xA6, 0xA2}, 0x000A21E7, 0x4CE443B9 },
            param{{0xB9, 0x43, 0xE4, 0x4C}, 0x000A21E7, 0x6429FB44 },
            param{{0x44, 0xFB, 0x29, 0x64}, 0x000A21E7, 0xB9F78FCE },
            param{{0xCE, 0x8F, 0xF7, 0xB9}, 0x000A21E7, 0x86B45C50 },
            param{{0x50, 0x5C, 0xB4, 0x86}, 0x000A21E7, 0x450420F3 },
            param{{0xF3, 0x20, 0x04, 0x45}, 0x000A21E7, 0xF96FEB3B },
            param{{0x3B, 0xEB, 0x6F, 0xF9}, 0x000A21E7, 0x0E01B7DA },
            param{{0xDA, 0xB7, 0x01, 0x0E}, 0x000A21E7, 0x6224B380 },
            param{{0x80, 0xB3, 0x24, 0x62}, 0x000A21E7, 0xD3321866 },
            param{{0x66, 0x18, 0x32, 0xD3}, 0x000A21E7, 0x851A6B32 },
            param{{0x32, 0x6B, 0x1A, 0x85}, 0x000A21E7, 0xD7D82CDD },
            param{{0xDD, 0x2C, 0xD8, 0xD7}, 0x000A21E7, 0xE0B78294 },
            param{{0x94, 0x82, 0xB7, 0xE0}, 0x000A21E7, 0xB8F29424 },
            param{{0x24, 0x94, 0xF2, 0xB8}, 0x000A21E7, 0x3931D8A8 }
        )
    );
}

namespace HashTable
{
    TEST(TestHashTable, ShouldReturnExpectedValue_WhenGivenData)
    {
        _BYTE hash_table [ 0x2d7 ]={0,};     
        _DWORD length = 0x000a21e7;
        _DWORD seed = 0xc63c99dd;
        _BYTE ret[0x2d7] = {
            0xD3, 0x4E, 0xD1, 0x8B, 0xC4, 0x88, 0x0C, 0x00, 0xBE, 0x9A, 0x1C, 0x7E, 0xCE, 0xBB, 0x83, 0xDB, 0xB9, 0xB3, 0xE2, 0x6D, 0xBB, 0xCB, 0xD6, 0xC8, 0x3B, 0x14, 0x9F, 0x96, 0xF1, 0x67, 0xBE, 0x43, 0x99, 0xB1, 0x26, 0xF2, 0xAE, 0xA3, 0xE8, 0x4E, 0x4F, 0xB4, 0x9C, 0x2E, 0xE1, 0x27, 0x92, 0x5D, 0xE3, 0x6A, 0x73, 0xD7, 0xA1, 0x1C, 0xA0, 0x7A, 0xD3, 0x55, 0x68, 0x21, 0xB3, 0x95, 0x07, 0xDC, 0x5A, 0xBE, 0xD8, 0x23, 0x35, 0x69, 0xB1, 0xBB, 0xE7, 0x97, 0xA4, 0xB1, 0xC8, 0x81, 0x7D, 0x73, 0xA8, 0x4C, 0x94, 0x56, 0xE4, 0x6B, 0x5B, 0x4F, 0xC0, 0xC8, 0x3E, 0xBF, 0x0B, 0x23, 0x35, 0x5E, 0x15, 0x35, 0x38, 0x21,
            0xCA, 0x71, 0x36, 0x0C, 0xA8, 0x57, 0x39, 0x33, 0x08, 0x1A, 0xFD, 0xA2, 0x32, 0xEE, 0xDF, 0xF2, 0xB7, 0xB5, 0x41, 0xE6, 0xEB, 0x35, 0xD7, 0x55, 0x2A, 0xC5, 0x08, 0xC1, 0x9E, 0x8B, 0xC4, 0x12, 0x3F, 0xDC, 0x56, 0x02, 0x09, 0x39, 0x8E, 0x26, 0xE8, 0x2C, 0x34, 0xB4, 0x01, 0x44, 0xC5, 0xD4, 0x85, 0xA8, 0x1B, 0xBD, 0x96, 0x14, 0x5B, 0xBE, 0x2B, 0x09, 0x61, 0xAF, 0xE5, 0x83, 0xAE, 0x00, 0x13, 0x0E, 0x84, 0x7D, 0xB0, 0xB7, 0xB6, 0xFC, 0x24, 0x7E, 0xEE, 0xDB, 0x1A, 0xF8, 0x5E, 0x72, 0x4A, 0x20, 0xB7, 0xC0, 0x0F, 0x2F, 0xAF, 0xBE, 0x8F, 0x30, 0xDA, 0x58, 0x1D, 0xF6, 0x8A, 0x1A, 0x1C, 0xB5, 0x87, 0x34,
            0xD5, 0xAC, 0x81, 0x8A, 0x6B, 0xE1, 0xC0, 0xCB, 0xAE, 0x38, 0x97, 0x6B, 0x7F, 0x20, 0xBE, 0x57, 0x00, 0xD2, 0x3E, 0x9E, 0x14, 0xBE, 0x35, 0xCD, 0x30, 0xD1, 0xDD, 0x59, 0x5D, 0xE6, 0xB8, 0xFC, 0xA9, 0x96, 0x3B, 0xD7, 0x62, 0x57, 0x8B, 0xF0, 0x52, 0xD9, 0xEC, 0x8A, 0xE1, 0x26, 0x7C, 0xB4, 0x55, 0x9D, 0xAC, 0xAD, 0x82, 0xB1, 0x76, 0xDF, 0xB4, 0x05, 0x88, 0xDE, 0x44, 0x47, 0xC4, 0xB7, 0x21, 0x7E, 0x1D, 0x2D, 0x06, 0x81, 0x77, 0x64, 0x3E, 0x59, 0x41, 0x3E, 0xA8, 0xCA, 0x32, 0xAB, 0xE1, 0x7D, 0x2E, 0x68, 0x09, 0xFD, 0xA8, 0x4C, 0xBC, 0x61, 0x69, 0x46, 0xA9, 0x40, 0xD3, 0xB6, 0x6E, 0x56, 0x43, 0x94,
            0x2D, 0x0A, 0x6B, 0x53, 0xFE, 0x75, 0x0A, 0x5C, 0x44, 0x3A, 0xD4, 0xF1, 0xF4, 0xD2, 0x81, 0xEE, 0xF2, 0xA7, 0xEF, 0x14, 0xBC, 0x91, 0x0D, 0x48, 0x7D, 0x4C, 0x71, 0x18, 0xA1, 0x01, 0xC2, 0xAE, 0x95, 0x17, 0x9B, 0xF5, 0xD2, 0xB3, 0x6F, 0xA2, 0x6F, 0x31, 0x14, 0xB4, 0x45, 0xF9, 0x21, 0x20, 0x11, 0x24, 0xD7, 0x2D, 0x35, 0x4A, 0xDD, 0xBE, 0xAF, 0xC8, 0xB2, 0x7E, 0x40, 0x30, 0x3F, 0x1C, 0x9F, 0x98, 0x57, 0x3E, 0x97, 0x2C, 0x66, 0x21, 0x1E, 0xA1, 0xFA, 0xC5, 0xB7, 0x05, 0x5B, 0xA8, 0x76, 0x74, 0x0A, 0x44, 0x08, 0x92, 0xE8, 0xF1, 0x63, 0x30, 0x87, 0xDE, 0xAA, 0x37, 0x6C, 0x13, 0xC3, 0x3F, 0x88, 0xBD,
            0x23, 0xDA, 0x91, 0x73, 0x63, 0x89, 0xE7, 0x7C, 0x00, 0x6B, 0xE3, 0xF6, 0x37, 0xAE, 0xB5, 0x3C, 0x7F, 0x6C, 0xD5, 0x55, 0x9A, 0xDB, 0x8F, 0x53, 0xFD, 0x49, 0xEC, 0x64, 0x67, 0x5C, 0x1B, 0x55, 0x93, 0x3A, 0x8D, 0x85, 0xF1, 0x40, 0xCF, 0x24, 0x74, 0xD4, 0x5C, 0xE3, 0xBC, 0x21, 0x1D, 0x6D, 0x30, 0x79, 0x50, 0x93, 0xD6, 0x6A, 0x37, 0x62, 0x75, 0xD5, 0xFB, 0x71, 0xF6, 0xD7, 0x47, 0xD9, 0x8C, 0x68, 0xC2, 0x1A, 0x60, 0x16, 0x37, 0x3F, 0x87, 0x43, 0x40, 0x76, 0x86, 0x6B, 0x7B, 0x5B, 0xE3, 0xAE, 0xEC, 0x6C, 0x2C, 0x54, 0x91, 0xF1, 0x01, 0x39, 0x2C, 0xD2, 0x49, 0xDD, 0xAA, 0x28, 0x7C, 0x7D, 0x15, 0xD4,
            0x2B, 0xA9, 0x5B, 0xDB, 0x10, 0xE7, 0x93, 0x3C, 0x07, 0x52, 0xEF, 0x71, 0x1D, 0xCF, 0x1B, 0xDF, 0xB4, 0x13, 0x70, 0x82, 0xB3, 0xAE, 0xA3, 0x7D, 0xB2, 0x44, 0x36, 0x26, 0x98, 0xDB, 0x08, 0x8F, 0x24, 0x3E, 0xEB, 0xD9, 0xCD, 0x3C, 0xB5, 0x0C, 0xD2, 0x83, 0x9B, 0x85, 0x5A, 0x5A, 0x02, 0x4F, 0x56, 0x25, 0xA3, 0xEC, 0xCF, 0xBF, 0xF3, 0x92, 0x0E, 0x7C, 0x35, 0x81, 0x7A, 0xEC, 0x10, 0x2D, 0x55, 0x58, 0x5E, 0x72, 0x3F, 0xA1, 0x9F, 0x09, 0x38, 0x47, 0x1D, 0xFA, 0x12, 0x10, 0x06, 0x79, 0x23, 0xAA, 0xEE, 0x62, 0x93, 0x40, 0x31, 0x15, 0xAD, 0x9C, 0x4C, 0x67, 0xAA, 0x5D, 0xFF, 0x2B, 0x08, 0x90, 0xA4, 0x4B,
            0x11, 0xD6, 0xAB, 0x7D, 0xC9, 0x8D, 0xDD, 0x75, 0x07, 0xF1, 0x26, 0xF1, 0x88, 0x99, 0xDE, 0xFB, 0x04, 0x7F, 0xCF, 0xD9, 0x47, 0x6A, 0x7A, 0xFC, 0x86, 0x83, 0x83, 0xD0, 0x17, 0x68, 0x25, 0xBE, 0xC1, 0x92, 0x1A, 0xDF, 0x04, 0x6F, 0xB0, 0x4B, 0xB9, 0x00, 0x75, 0x32, 0xEE, 0xAD, 0xAC, 0x59, 0x39, 0xC0, 0x8F, 0x61, 0x0B, 0x51, 0x79, 0xF8, 0xBE, 0xAD, 0x7F, 0xD9, 0xBA, 0xFE, 0xB3, 0xFC, 0x00, 0x21, 0x79, 0x21, 0x50, 0xAD, 0x32, 0x4B, 0xDB, 0x25, 0xD0, 0x36, 0xBE, 0x7A, 0x26, 0x7D, 0xE9, 0x5D, 0xFF, 0x8E, 0x67, 0xAD, 0x55, 0x67, 0x46, 0x05, 0x6C, 0x95, 0x17, 0x4F, 0x73, 0x78, 0xF3, 0x97, 0x0C, 0xFD,
            0xC4, 0xA3, 0xD8, 0x59, 0x1B, 0xCD, 0xE0, 0xA4, 0xAB, 0x60, 0xF7, 0x31, 0xF1, 0xD7, 0x18, 0x61, 0x9A, 0x16, 0x5E, 0xDE, 0x8E, 0x34, 0xA2, 0x91, 0x8A, 0xA6, 0x75,

        };
        int i;

        generateHashTable_0x2d7(hash_table, length, seed);

        for ( i = 0 ; i < 0x2d7 ; i ++ )
            EXPECT_EQ( hash_table[ i ], ret[ i ]  );
    }
}